{"version":3,"sources":["components/Header.js","components/Infos.js","utils/utils.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Header","zip","zipcodes","handleChange","handleSubmit","selectZip","liste","map","el","index","className","onClick","key","Code_postal","Localité_FR","onSubmit","type","value","placeholder","onChange","Infos","city","date","Date","day","getDate","month","Intl","DateTimeFormat","format","formatDate","hours","getHours","minutes","getMinutes","round","toFixed","Wheather","data","main","temp","temp_min","temp_max","Math","ceil","wind","speed","humidity","sys","sunrise","sunset","App","state","sampleData","filteredZipcodes","getDataFromWeather","console","log","axios","get","then","resp","localStorage","setItem","now","JSON","stringify","setState","getDataFromLocal","parse","getItem","event","target","length","filter","toString","startsWith","preventDefault","lastUpdate","getTime","this","undefined","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"865jBAoCeA,G,YA/BA,SAAC,GAA2D,IAA1DC,EAAyD,EAAzDA,IAAKC,EAAoD,EAApDA,SAAUC,EAA0C,EAA1CA,aAAaC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,UAEnDC,EAAQJ,EAASK,KAAI,SAACC,EAAIC,GAAL,OACzB,wBACAC,UAAU,eACVC,QAAS,kBAAMN,EAAUG,IACzBI,IAAKH,GACH,uBAAGC,UAAU,gBACVF,EAAGK,YADN,IACoBL,EAAGM,sBAK3B,OACE,4BAAQJ,UAAU,oBAChB,0BACAK,SAAWX,GACT,2BACAY,KAAK,QACLC,MAAQhB,EACRiB,YAAY,WACZC,SAAUhB,IACV,4BACGG,GAEH,4BAAQU,KAAK,UAAb,cCPOI,G,MAlBD,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACRC,EAAO,IAAIC,KACXC,EAAMF,EAAKG,UACXC,EAAQ,IAAIC,KAAKC,eAAe,QAAS,CAACF,MAAO,SAASG,OAAOP,GAEvE,OACE,6BAASZ,UAAU,oCACjB,uBAAGA,UAAU,eACVc,EADH,IACSE,GAET,uBAAGhB,UAAU,mBACVW,GAEH,0CClBOS,G,MAAa,SAAAb,GACxB,IAAMK,EAAO,IAAIC,KAAa,IAARN,GAChBc,EAAQT,EAAKU,WAAa,GAAK,IAAMV,EAAKU,WAAaV,EAAKU,WAC5DC,EAAUX,EAAKY,aAErB,MAAM,GAAN,OAAUH,EAAV,YAAmBE,KAGRE,EAAQ,SAAAlB,GAAK,MAAoB,iBAATA,EAAoBA,EAAMmB,QAAQ,GAAKnB,GC+B7DoB,EAlCE,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAEjB,OACE,wBAAI5B,UAAU,WACZ,wBAAIA,UAAU,oCACXyB,EAAMG,EAAKC,KAAKC,MADnB,QAC2B,6BACzB,sCACQL,EAAMG,EAAKC,KAAKE,UADxB,gBAC6CN,EAAMG,EAAKC,KAAKG,UAD7D,UAQF,wBAAIhC,UAAU,iBACZ,0BAAMA,UAAU,oBAAhB,QAA8C,6BAC7CiC,KAAKC,KAAuB,IAAlBN,EAAKO,KAAKC,OAFvB,SAIA,wBAAIpC,UAAU,iBACZ,0BAAMA,UAAU,wBAAhB,YAAsD,6BACrD4B,EAAKC,KAAKQ,SAFb,KAIA,wBAAIrC,UAAU,iBACZ,0BAAMA,UAAU,uBAAhB,WAAoD,6BACnDoB,EAAWQ,EAAKU,IAAIC,UAEvB,wBAAIvC,UAAU,iBACZ,0BAAMA,UAAU,sBAAhB,UAAkD,6BACjDoB,EAAWQ,EAAKU,IAAIE,W,eCmFZC,E,2MAxGbC,MAAQ,CACN/B,KAAM,iBACNpB,IAAK,KACLqC,KAAMe,EACNnD,WACAoD,iBAAkB,I,EAqBpBC,mBAAqB,SAAAtD,GACnBuD,QAAQC,IAAI,aAEZC,IAAMC,IAAN,8DAAiE1D,EAAjE,4DACC2D,MAAK,SAAAC,GACJC,aAAaC,QAAQ,aAAcxC,KAAKyC,OACxCF,aAAaC,QAAQ,OAAQE,KAAKC,UAAUL,EAAKvB,OACjD,EAAK6B,SAAS,CACZ7B,KAAMuB,EAAKvB,W,EAKjB8B,iBAAoB,WAClBZ,QAAQC,IAAI,cAEZ,IAAMnB,EAAO2B,KAAKI,MAAMP,aAAaQ,QAAQ,SAC7C,EAAKH,SAAS,CAAE7B,U,EAGlBnC,aAAe,SAAAoE,GACb,IAAMtE,EAAMsE,EAAMC,OAAOvD,MAEzB,GAAGhB,EAAIwE,QAAU,EAAG,CAClB,IAAMnB,EAAmBpD,EAASwE,QAAO,SAAAlE,GACvC,OAAOA,EAAGK,YAAY8D,WAAWC,WAAW3E,MAG9C,EAAKkE,SAAS,CAACb,0BAEf,EAAKa,SAAS,CAACb,iBAAmB,KAGpC,EAAKa,SAAS,CAAClE,S,EAGjBG,aAAe,SAAAmE,GACbA,EAAMM,iBACN,IAAMvB,EAAmB,EAAKF,MAAME,iBAEjC,EAAKF,MAAMnD,IAAIwE,QAAU,GAAKnB,EAAiBmB,OAAS,GACzD,EAAKpE,UAAUiD,EAAiB,K,EAIpCjD,UAAY,SAAAG,GACV,IAAMP,EAAMO,EAAGK,YACTQ,EAAOb,EAAGM,iBAGhBgD,aAAaC,QAAQ,OAAQ1C,GAC7ByC,aAAaC,QAAQ,MAAO9D,GAE5B,EAAKsD,mBAAmBtD,GAExB,EAAKkE,SAAS,CAAClE,MAAKoB,OAAMiC,iBAPD,M,mFAjEzB,IAAMwB,EAAahB,aAAaQ,QAAQ,cAClCjD,EAAOyC,aAAaQ,QAAQ,QAC5BrE,EAAM6D,aAAaQ,QAAQ,OAC3BN,GAAM,IAAIzC,MAAOwD,UAEX,OAAT1D,GAAyB,OAARpB,GAA+B,OAAf6E,GAClCE,KAAKb,SAAS,CAAC9C,OAAMpB,aAGLgF,IAAfH,GAA4BnC,KAAKC,MAAMoB,EAAMc,GAAc,KAAQ,IACpEE,KAAKZ,mBAELY,KAAKzB,mBAAmBtD,GAAK+E,KAAK5B,MAAMnD,O,+BAkE1C,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,CACAA,IAAO+E,KAAK5B,MAAMnD,IAClBC,SAAY8E,KAAK5B,MAAME,iBACvBnD,aAAgB6E,KAAK7E,aACrBC,aAAgB4E,KAAK5E,aACrBC,UAAa2E,KAAK3E,YAClB,kBAAC,EAAD,CACAgB,KAAO2D,KAAK5B,MAAM/B,OAClB,kBAAC,EAAD,CACAiB,KAAQ0C,KAAK5B,MAAMd,Y,GAnGT4C,aCCAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.2b7391fd.chunk.js","sourcesContent":["import React from 'react'\nimport './Header.css'\n\n\n\nconst Header = ({zip, zipcodes, handleChange,handleSubmit, selectZip}) => {\n\n  const liste = zipcodes.map((el, index) => (\n    <li\n    className=\"zipcode_list\"\n    onClick={() => selectZip(el)}\n    key={index}>\n      <p className=\"zipcode__zip\">\n        {el.Code_postal} {el.Localité_FR}\n      </p>\n    </li>\n  ))\n\n  return (\n    <header className=\"container header\">\n      <form\n      onSubmit= {handleSubmit}>\n        <input\n        type=\"texte\"\n        value= {zip}\n        placeholder=\"zip code\"\n        onChange={handleChange} />\n        <ul>\n          {liste}\n        </ul>\n        <button type=\"submit\">submit</button>\n      </form>\n    </header>\n  )\n}\n\nexport default Header","import React from 'react'\nimport './Infos.css'\n\n\n\nconst Infos = ({city}) => {\n  const date = new Date()\n  const day = date.getDate()\n  const month = new Intl.DateTimeFormat('fr-BE', {month: 'long'}).format(date)\n\n  return (\n    <section className=\"container section section__infos\">\n      <p className=\"infos__date\">\n        {day} {month}\n      </p>\n      <p className=\"infos__location\">\n        {city}\n      </p>\n      <p>Belgique</p>\n    </section>\n  )\n}\n\nexport default Infos","export const formatDate = value => {\n  const date = new Date(value * 1000)\n  const hours = date.getHours() < 10 ? '0' + date.getHours() : date.getHours()\n  const minutes = date.getMinutes()\n\n  return `${hours}h${minutes}`\n}\n\nexport const round = value => typeof value == \"number\" ? value.toFixed(1) : value\n","import React from 'react'\nimport './Weather.css'\nimport {formatDate, round} from '../utils/utils'\n\n\nconst Wheather = ({data}) => {\n\n  return (\n    <ul className=\"weather\">\n      <li className=\"weather__info weather__info--big\">\n        {round(data.main.temp)}°C<br />\n        <span>\n          min: {round(data.main.temp_min)}°c | max: {round(data.main.temp_max)}°c\n        </span>\n      </li>\n      {/* <li className=\"weather__info\">\n        <span className=\"info__title rain\">Rain</span><br />\n        {data.rain ? (data.rain['1h']*10)+'cm/h' : '-'}\n      </li> */}\n      <li className=\"weather__info\">\n        <span className=\"info__title wind\">Wind</span><br />\n        {Math.ceil(data.wind.speed * 3.6)} Km/h\n      </li>\n      <li className=\"weather__info\">\n        <span className=\"info__title humidity\">humidity</span><br />\n        {data.main.humidity}%\n      </li>\n      <li className=\"weather__info\">\n        <span className=\"info__title sunrise\">Sunrise</span><br />\n        {formatDate(data.sys.sunrise)}\n      </li>\n      <li className=\"weather__info\">\n        <span className=\"info__title sunset\">Sunset</span><br />\n        {formatDate(data.sys.sunset)}\n      </li>\n    </ul>\n  )\n}\n\nexport default Wheather","  import React, {Component, Fragment} from 'react';\n  import axios from 'axios';\n  import './App.css';\n\n  import Header from './components/Header';\n  import Infos from './components/Infos';\n  import Weather from './components/Weather';\n\n  import sampleData from './sampleData.json';\n  import zipcodes from './zipcodes.json';\n\n  class App extends Component {\n    state = {\n      city: 'Hélécine',\n      zip: 1357,\n      data: sampleData,\n      zipcodes,\n      filteredZipcodes: []\n    }\n\n    componentDidMount () {\n      const lastUpdate = localStorage.getItem('lastUpdate')\n      const city = localStorage.getItem('city')\n      const zip = localStorage.getItem('zip')\n      const now = new Date().getTime()\n\n      if(city !== null && zip !== null && lastUpdate !== null) {\n        this.setState({city, zip})\n      }\n\n      if(lastUpdate !== undefined && Math.ceil((now - lastUpdate) / 1000) < 600) {\n        this.getDataFromLocal()\n      } else {\n        this.getDataFromWeather(zip||this.state.zip)\n      }\n\n    }\n\n    getDataFromWeather = zip => {\n      console.log('from site');\n\n      axios.get(`https://api.openweathermap.org/data/2.5/weather?zip=${zip},be&units=metric&appid=e0f8b3ba6e6a3d2236d0cf7502e02c99`)\n      .then(resp => {\n        localStorage.setItem('lastUpdate', Date.now())\n        localStorage.setItem('data', JSON.stringify(resp.data))\n        this.setState({\n          data: resp.data\n        })\n      })\n    }\n\n    getDataFromLocal =  () => {\n      console.log('from local');\n\n      const data = JSON.parse(localStorage.getItem('data'))\n      this.setState({ data })\n    }\n\n    handleChange = event => {\n      const zip = event.target.value\n\n      if(zip.length >= 2) {\n        const filteredZipcodes = zipcodes.filter(el => {\n          return el.Code_postal.toString().startsWith(zip)\n        })\n\n        this.setState({filteredZipcodes})\n      } else {\n        this.setState({filteredZipcodes : []})\n      }\n\n      this.setState({zip})\n    }\n\n    handleSubmit = event => {\n      event.preventDefault()\n      const filteredZipcodes = this.state.filteredZipcodes;\n\n      if(this.state.zip.length >= 2 && filteredZipcodes.length > 0 ) {\n        this.selectZip(filteredZipcodes[0])\n      }\n    }\n\n    selectZip = el => {\n      const zip = el.Code_postal\n      const city = el.Localité_FR\n      const filteredZipcodes = []\n\n      localStorage.setItem('city', city)\n      localStorage.setItem('zip', zip)\n\n      this.getDataFromWeather(zip)\n\n      this.setState({zip, city, filteredZipcodes})\n    }\n\n\n\n    render () {\n      return (\n        <Fragment>\n          <Header\n          zip = {this.state.zip}\n          zipcodes = {this.state.filteredZipcodes}\n          handleChange = {this.handleChange}\n          handleSubmit = {this.handleSubmit}\n          selectZip = {this.selectZip} />\n          <Infos\n          city= {this.state.city} />\n          <Weather\n          data = {this.state.data} />\n        </Fragment>\n      )\n    }\n  }\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}